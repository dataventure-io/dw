//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.6
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\src\dataventure-io\dw\src\dw-etl\extractor\CSV.g4 by ANTLR 4.6.6

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace dw.etl.extractor {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.6")]
[System.CLSCompliant(false)]
public partial class CSVParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, TEXT=4, STRING=5;
	public const int
		RULE_csvFile = 0, RULE_row = 1, RULE_field = 2;
	public static readonly string[] ruleNames = {
		"csvFile", "row", "field"
	};

	private static readonly string[] _LiteralNames = {
		null, "','", "'\r'", "'\n'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, "TEXT", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSV.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public CSVParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class CsvFileContext : ParserRuleContext {
		public RowContext[] row() {
			return GetRuleContexts<RowContext>();
		}
		public RowContext row(int i) {
			return GetRuleContext<RowContext>(i);
		}
		public CsvFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_csvFile; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterCsvFile(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitCsvFile(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCsvFile(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CsvFileContext csvFile() {
		CsvFileContext _localctx = new CsvFileContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_csvFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 6; row();
				}
				}
				State = 9;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << TEXT) | (1L << STRING))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowContext : ParserRuleContext {
		public FieldContext[] field() {
			return GetRuleContexts<FieldContext>();
		}
		public FieldContext field(int i) {
			return GetRuleContext<FieldContext>(i);
		}
		public RowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_row; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterRow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitRow(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RowContext row() {
		RowContext _localctx = new RowContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_row);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 11; field();
			State = 16;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==T__0) {
				{
				{
				State = 12; Match(T__0);
				State = 13; field();
				}
				}
				State = 18;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 20;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==T__1) {
				{
				State = 19; Match(T__1);
				}
			}

			State = 22; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode TEXT() { return GetToken(CSVParser.TEXT, 0); }
		public ITerminalNode STRING() { return GetToken(CSVParser.STRING, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.EnterField(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSVListener typedListener = listener as ICSVListener;
			if (typedListener != null) typedListener.ExitField(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICSVVisitor<TResult> typedVisitor = visitor as ICSVVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_field);
		try {
			State = 27;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case TEXT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 24; Match(TEXT);
				}
				break;
			case STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 25; Match(STRING);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\a \x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x3\x2\x6\x2\n\n\x2\r\x2\xE\x2\v\x3\x3\x3\x3\x3\x3"+
		"\a\x3\x11\n\x3\f\x3\xE\x3\x14\v\x3\x3\x3\x5\x3\x17\n\x3\x3\x3\x3\x3\x3"+
		"\x4\x3\x4\x3\x4\x5\x4\x1E\n\x4\x3\x4\x2\x2\x2\x5\x2\x2\x4\x2\x6\x2\x2"+
		"\x2!\x2\t\x3\x2\x2\x2\x4\r\x3\x2\x2\x2\x6\x1D\x3\x2\x2\x2\b\n\x5\x4\x3"+
		"\x2\t\b\x3\x2\x2\x2\n\v\x3\x2\x2\x2\v\t\x3\x2\x2\x2\v\f\x3\x2\x2\x2\f"+
		"\x3\x3\x2\x2\x2\r\x12\x5\x6\x4\x2\xE\xF\a\x3\x2\x2\xF\x11\x5\x6\x4\x2"+
		"\x10\xE\x3\x2\x2\x2\x11\x14\x3\x2\x2\x2\x12\x10\x3\x2\x2\x2\x12\x13\x3"+
		"\x2\x2\x2\x13\x16\x3\x2\x2\x2\x14\x12\x3\x2\x2\x2\x15\x17\a\x4\x2\x2\x16"+
		"\x15\x3\x2\x2\x2\x16\x17\x3\x2\x2\x2\x17\x18\x3\x2\x2\x2\x18\x19\a\x5"+
		"\x2\x2\x19\x5\x3\x2\x2\x2\x1A\x1E\a\x6\x2\x2\x1B\x1E\a\a\x2\x2\x1C\x1E"+
		"\x3\x2\x2\x2\x1D\x1A\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1C\x3\x2\x2"+
		"\x2\x1E\a\x3\x2\x2\x2\x6\v\x12\x16\x1D";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace dw.etl.extractor
